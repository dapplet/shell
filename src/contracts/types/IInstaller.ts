/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace IDiamondWritableInternal {
  export type FacetCutStruct = {
    target: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    selectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    target: string;
    action: number;
    selectors: string[];
  };
}

export declare namespace IPKG {
  export type CUTStruct = {
    cuts: IDiamondWritableInternal.FacetCutStruct[];
    target: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type CUTStructOutput = [
    IDiamondWritableInternal.FacetCutStructOutput[],
    string,
    string
  ] & {
    cuts: IDiamondWritableInternal.FacetCutStructOutput[];
    target: string;
    data: string;
  };
}

export interface IInstallerInterface extends utils.Interface {
  functions: {
    'create(((address,uint8,bytes4[])[],address,bytes),string)': FunctionFragment;
    'install(address)': FunctionFragment;
    'uninstall(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'create' | 'install' | 'uninstall'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'create',
    values: [IPKG.CUTStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'install',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'uninstall',
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'create', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'install', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uninstall', data: BytesLike): Result;

  events: {};
}

export interface IInstaller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IInstallerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      _pkg: IPKG.CUTStruct,
      _ipfsCid: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    install(
      _pkg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uninstall(
      _pkg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  create(
    _pkg: IPKG.CUTStruct,
    _ipfsCid: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  install(
    _pkg: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uninstall(
    _pkg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    create(
      _pkg: IPKG.CUTStruct,
      _ipfsCid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    install(
      _pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uninstall(
      _pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    create(
      _pkg: IPKG.CUTStruct,
      _ipfsCid: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    install(
      _pkg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uninstall(
      _pkg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      _pkg: IPKG.CUTStruct,
      _ipfsCid: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    install(
      _pkg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uninstall(
      _pkg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
