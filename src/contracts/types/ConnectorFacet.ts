/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace IDiamondWritableInternal {
  export type FacetCutStruct = {
    target: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    selectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    target: string;
    action: number;
    selectors: string[];
  };
}

export declare namespace IPKG {
  export type CUTStruct = {
    cuts: IDiamondWritableInternal.FacetCutStruct[];
    target: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type CUTStructOutput = [
    IDiamondWritableInternal.FacetCutStructOutput[],
    string,
    string
  ] & {
    cuts: IDiamondWritableInternal.FacetCutStructOutput[];
    target: string;
    data: string;
  };
}

export interface ConnectorFacetInterface extends utils.Interface {
  functions: {
    'createPkg(((address,uint8,bytes4[])[],address,bytes),string)': FunctionFragment;
    'installPkg(address,address)': FunctionFragment;
    'model()': FunctionFragment;
    'uninstallPkg(address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'createPkg'
      | 'installPkg'
      | 'model'
      | 'uninstallPkg'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'createPkg',
    values: [IPKG.CUTStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'installPkg',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'model', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'uninstallPkg',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'createPkg', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'installPkg', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'model', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'uninstallPkg',
    data: BytesLike
  ): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'PackageCreated(address,address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Upgrade(address,address,bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PackageCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgrade'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface PackageCreatedEventObject {
  pkg: string;
  creator: string;
}
export type PackageCreatedEvent = TypedEvent<
  [string, string],
  PackageCreatedEventObject
>;

export type PackageCreatedEventFilter = TypedEventFilter<PackageCreatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpgradeEventObject {
  pkg: string;
  client: string;
  install: boolean;
}
export type UpgradeEvent = TypedEvent<
  [string, string, boolean],
  UpgradeEventObject
>;

export type UpgradeEventFilter = TypedEventFilter<UpgradeEvent>;

export interface ConnectorFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectorFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPkg(
      _pkg: IPKG.CUTStruct,
      _ipfsCid: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installPkg(
      _pkg: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    model(overrides?: CallOverrides): Promise<[string]>;

    uninstallPkg(
      _pkg: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createPkg(
    _pkg: IPKG.CUTStruct,
    _ipfsCid: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installPkg(
    _pkg: PromiseOrValue<string>,
    _sender: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  model(overrides?: CallOverrides): Promise<string>;

  uninstallPkg(
    _pkg: PromiseOrValue<string>,
    _sender: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPkg(
      _pkg: IPKG.CUTStruct,
      _ipfsCid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    installPkg(
      _pkg: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    model(overrides?: CallOverrides): Promise<string>;

    uninstallPkg(
      _pkg: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    'PackageCreated(address,address)'(
      pkg?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null
    ): PackageCreatedEventFilter;
    PackageCreated(
      pkg?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null
    ): PackageCreatedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    'Upgrade(address,address,bool)'(
      pkg?: PromiseOrValue<string> | null,
      client?: PromiseOrValue<string> | null,
      install?: null
    ): UpgradeEventFilter;
    Upgrade(
      pkg?: PromiseOrValue<string> | null,
      client?: PromiseOrValue<string> | null,
      install?: null
    ): UpgradeEventFilter;
  };

  estimateGas: {
    createPkg(
      _pkg: IPKG.CUTStruct,
      _ipfsCid: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installPkg(
      _pkg: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    model(overrides?: CallOverrides): Promise<BigNumber>;

    uninstallPkg(
      _pkg: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPkg(
      _pkg: IPKG.CUTStruct,
      _ipfsCid: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installPkg(
      _pkg: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    model(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uninstallPkg(
      _pkg: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
