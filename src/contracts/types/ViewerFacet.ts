/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface ViewerFacetInterface extends utils.Interface {
  functions: {
    'addr(bytes32)': FunctionFragment;
    'contentHash(bytes32)': FunctionFragment;
    'metadataOf(address[])': FunctionFragment;
    'name(bytes32)': FunctionFragment;
    'node(address)': FunctionFragment;
    'ownedBy(address)': FunctionFragment;
    'ownerOf(address)': FunctionFragment;
    'receivedStakeOf(address)': FunctionFragment;
    'sentStakeOf(address)': FunctionFragment;
    'text(bytes32,string)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addr'
      | 'contentHash'
      | 'metadataOf'
      | 'name'
      | 'node'
      | 'ownedBy'
      | 'ownerOf'
      | 'receivedStakeOf'
      | 'sentStakeOf'
      | 'text'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addr',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'contentHash',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'metadataOf',
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'name',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'node',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'ownedBy',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'receivedStakeOf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'sentStakeOf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'text',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'addr', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'contentHash',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'metadataOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'node', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownedBy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'receivedStakeOf',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sentStakeOf',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'text', data: BytesLike): Result;

  events: {};
}

export interface ViewerFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ViewerFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addr(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contentHash(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { metadata: string[] }>;

    name(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    node(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pkgs: string[] }>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;

    text(
      _node: PromiseOrValue<BytesLike>,
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addr(
    _node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  contentHash(
    _node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  metadataOf(
    pkgs: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  name(
    _node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  node(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ownedBy(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  ownerOf(
    pkg: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  receivedStakeOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
  >;

  sentStakeOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
  >;

  text(
    _node: PromiseOrValue<BytesLike>,
    _key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addr(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    contentHash(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    name(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    node(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;

    text(
      _node: PromiseOrValue<BytesLike>,
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addr(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contentHash(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    node(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    text(
      _node: PromiseOrValue<BytesLike>,
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addr(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contentHash(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(
      _node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    node(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    text(
      _node: PromiseOrValue<BytesLike>,
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
