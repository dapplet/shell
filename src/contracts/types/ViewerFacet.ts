/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ViewerFacetInterface extends utils.Interface {
  functions: {
    "isPkg(address)": FunctionFragment;
    "metadataOf(address[])": FunctionFragment;
    "nameOf(address[])": FunctionFragment;
    "ownedBy(address)": FunctionFragment;
    "ownerOf(address)": FunctionFragment;
    "receivedStakeOf(address)": FunctionFragment;
    "sentStakeOf(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isPkg"
      | "metadataOf"
      | "nameOf"
      | "ownedBy"
      | "ownerOf"
      | "receivedStakeOf"
      | "sentStakeOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isPkg",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataOf",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nameOf",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedBy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "receivedStakeOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sentStakeOf",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "isPkg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metadataOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nameOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownedBy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivedStakeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sentStakeOf",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ViewerFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ViewerFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isPkg(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { metadata: string[] }>;

    nameOf(
      clients: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { names: string[] }>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pkgs: string[] }>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;
  };

  isPkg(
    pkg: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  metadataOf(
    pkgs: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  nameOf(
    clients: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  ownedBy(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  ownerOf(
    pkg: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  receivedStakeOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
  >;

  sentStakeOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
  >;

  callStatic: {
    isPkg(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    nameOf(
      clients: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;
  };

  filters: {};

  estimateGas: {
    isPkg(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nameOf(
      clients: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isPkg(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nameOf(
      clients: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
